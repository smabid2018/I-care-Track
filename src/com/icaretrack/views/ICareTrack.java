/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.icaretrack.views;

import static com.icaretrack.controllers.SearchingAlgorithm.performBinarySearchAll;
import com.icaretrack.controllers.SortingAlgorithm;
import com.icaretrack.util.StringUtil;
import com.icaretrack.models.ICareTrackModel;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sheikh Md Abid
 * Londonmet Id : 22068727
 * College Id : NP01AI4A220051
 */
public class ICareTrack extends javax.swing.JFrame {
    // the main patient list which stores data permanently
    ArrayList<ICareTrackModel> patientsList = new ArrayList();
    // the temporary list for sort time operation
    ArrayList<ICareTrackModel> currentPatientsList = new ArrayList();
    // table model to read and write the information in table
    DefaultTableModel tableModel;
    
    /**
     * Creates new form ICareTrack
     */
    public ICareTrack() {
        initComponents();
        // gets the authorization to read the table
        this.tableModel = (DefaultTableModel) tblPatientDetails.getModel();
        getAllTableData(); // initializes with Patient information 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgGender = new javax.swing.ButtonGroup();
        pnlTitle = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        pnlAdmit = new javax.swing.JPanel();
        tfFullName = new javax.swing.JTextField();
        tfAge = new javax.swing.JTextField();
        tfAdddress = new javax.swing.JTextField();
        tfContactNo = new javax.swing.JTextField();
        tfGuardian = new javax.swing.JTextField();
        btnAdmit = new javax.swing.JButton();
        tfPatientId = new javax.swing.JTextField();
        rbFemale = new javax.swing.JRadioButton();
        rbMale = new javax.swing.JRadioButton();
        lblGender = new javax.swing.JLabel();
        lblEntryHeading = new javax.swing.JLabel();
        cbDepartment = new javax.swing.JComboBox<>();
        jdcAppointmentDate = new com.toedter.calendar.JDateChooser();
        cbRelation = new javax.swing.JComboBox<>();
        cbConsultant = new javax.swing.JComboBox<>();
        lblDepartment = new javax.swing.JLabel();
        lblConsultant = new javax.swing.JLabel();
        lblRelation = new javax.swing.JLabel();
        lblAppointmentDate = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        lblIDError = new javax.swing.JLabel();
        lblAgeError = new javax.swing.JLabel();
        lblAddressError = new javax.swing.JLabel();
        lblGuardianError = new javax.swing.JLabel();
        lblContactError = new javax.swing.JLabel();
        lblFullNameError = new javax.swing.JLabel();
        lblGenderError = new javax.swing.JLabel();
        lblAppointmentError = new javax.swing.JLabel();
        pnlSearch = new javax.swing.JPanel();
        tfSearchBox = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        cbSort = new javax.swing.JComboBox<>();
        btnSortByAsc = new javax.swing.JButton();
        btnSortByDesc = new javax.swing.JButton();
        lblSortBy = new javax.swing.JLabel();
        cbFilter = new javax.swing.JComboBox<>();
        lblFilter = new javax.swing.JLabel();
        pnlPatientList = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientDetails = new javax.swing.JTable();
        lblTableTitle = new javax.swing.JLabel();
        btnRefresh = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 255, 204));
        setName("mainFrame"); // NOI18N

        pnlTitle.setBackground(new java.awt.Color(204, 255, 255));

        lblTitle.setFont(new java.awt.Font("Monotype Corsiva", 1, 22)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 51, 51));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/icaretrack/resources/logo.png"))); // NOI18N
        lblTitle.setText("I Care Track");
        lblTitle.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        javax.swing.GroupLayout pnlTitleLayout = new javax.swing.GroupLayout(pnlTitle);
        pnlTitle.setLayout(pnlTitleLayout);
        pnlTitleLayout.setHorizontalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTitleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlTitleLayout.setVerticalGroup(
            pnlTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTitleLayout.createSequentialGroup()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );

        pnlAdmit.setBackground(new java.awt.Color(204, 255, 255));
        pnlAdmit.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tfFullName.setBackground(new java.awt.Color(204, 255, 255));
        tfFullName.setToolTipText("");
        tfFullName.setBorder(javax.swing.BorderFactory.createTitledBorder("Full Name"));
        tfFullName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfFullNameKeyTyped(evt);
            }
        });
        pnlAdmit.add(tfFullName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 222, 60));

        tfAge.setBackground(new java.awt.Color(204, 255, 255));
        tfAge.setToolTipText("");
        tfAge.setBorder(javax.swing.BorderFactory.createTitledBorder("Age"));
        tfAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfAgeKeyTyped(evt);
            }
        });
        pnlAdmit.add(tfAge, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, 30, 61, 60));

        tfAdddress.setBackground(new java.awt.Color(204, 255, 255));
        tfAdddress.setToolTipText("");
        tfAdddress.setBorder(javax.swing.BorderFactory.createTitledBorder("Address"));
        tfAdddress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfAdddressKeyTyped(evt);
            }
        });
        pnlAdmit.add(tfAdddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 30, 260, 60));

        tfContactNo.setBackground(new java.awt.Color(204, 255, 255));
        tfContactNo.setToolTipText("");
        tfContactNo.setBorder(javax.swing.BorderFactory.createTitledBorder("Contact No."));
        tfContactNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfContactNoKeyTyped(evt);
            }
        });
        pnlAdmit.add(tfContactNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 30, 219, 60));

        tfGuardian.setBackground(new java.awt.Color(204, 255, 255));
        tfGuardian.setToolTipText("");
        tfGuardian.setBorder(javax.swing.BorderFactory.createTitledBorder("Guardian"));
        tfGuardian.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfGuardianKeyTyped(evt);
            }
        });
        pnlAdmit.add(tfGuardian, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 30, 226, 60));

        btnAdmit.setBackground(new java.awt.Color(0, 102, 51));
        btnAdmit.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        btnAdmit.setForeground(new java.awt.Color(255, 255, 255));
        btnAdmit.setText("ADMIT");
        btnAdmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdmitActionPerformed(evt);
            }
        });
        pnlAdmit.add(btnAdmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 90, 103, 81));

        tfPatientId.setBackground(new java.awt.Color(204, 255, 255));
        tfPatientId.setToolTipText("");
        tfPatientId.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient ID"));
        tfPatientId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfPatientIdKeyTyped(evt);
            }
        });
        pnlAdmit.add(tfPatientId, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 110, 170, 60));

        bgGender.add(rbFemale);
        rbFemale.setText("Female");
        rbFemale.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbFemaleMouseClicked(evt);
            }
        });
        pnlAdmit.add(rbFemale, new org.netbeans.lib.awtextra.AbsoluteConstraints(307, 56, -1, -1));

        bgGender.add(rbMale);
        rbMale.setText("Male");
        rbMale.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbMaleMouseClicked(evt);
            }
        });
        pnlAdmit.add(rbMale, new org.netbeans.lib.awtextra.AbsoluteConstraints(374, 56, -1, -1));

        lblGender.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblGender.setText("Gender");
        pnlAdmit.add(lblGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(307, 28, 46, -1));

        lblEntryHeading.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblEntryHeading.setText("Enter New details");
        pnlAdmit.add(lblEntryHeading, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 143, -1));

        cbDepartment.setBackground(new java.awt.Color(204, 255, 255));
        cbDepartment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Emergency", "Cardiology", "Dermatology", "Gastroenterology", "Neurology", "Oncology", "Ophthalmology", "Orthopedics", "Pediatrics", "Psychology" }));
        cbDepartment.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        cbDepartment.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pnlAdmit.add(cbDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 120, 230, 50));

        jdcAppointmentDate.setBackground(new java.awt.Color(204, 255, 255));
        jdcAppointmentDate.setDateFormatString("yyyy-MM-dd");
        jdcAppointmentDate.setDoubleBuffered(false);
        jdcAppointmentDate.setRequestFocusEnabled(false);
        jdcAppointmentDate.setVerifyInputWhenFocusTarget(false);
        jdcAppointmentDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcAppointmentDatePropertyChange(evt);
            }
        });
        pnlAdmit.add(jdcAppointmentDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 120, 220, 50));
        ((JTextFieldDateEditor) jdcAppointmentDate.getDateEditor()).setEditable(false);

        cbRelation.setBackground(new java.awt.Color(204, 255, 255));
        cbRelation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Brother", "Father", "Friend", "Husband", "Mother", "Sister", "Wife", "Uncle", "Aunt", "Nephew", "Cousin", "Brother-in-law", "Sister-in-law" }));
        cbRelation.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        cbRelation.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pnlAdmit.add(cbRelation, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, 210, 50));

        cbConsultant.setBackground(new java.awt.Color(204, 255, 255));
        cbConsultant.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dr. Aarav Adhikari", "Dr. Anjali Gautam", "Dr. Siddharth Bhattarai", "Dr. Alisha Shrestha", "Dr. Sarthak Rijal", "Dr. Neha Maharjan", "Dr. Arjun Acharya", "Dr. Priya Joshi", "Dr. Roshan Lama", "Dr. Anaya Basnet", "Dr. Maya Karki" }));
        cbConsultant.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        cbConsultant.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        pnlAdmit.add(cbConsultant, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 120, 227, 50));

        lblDepartment.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDepartment.setText("Department");
        pnlAdmit.add(lblDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 105, 160, -1));

        lblConsultant.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblConsultant.setText("Consultant");
        pnlAdmit.add(lblConsultant, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 105, 160, -1));

        lblRelation.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblRelation.setText("Relation");
        pnlAdmit.add(lblRelation, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 105, 160, -1));

        lblAppointmentDate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAppointmentDate.setText("Appointment Date");
        pnlAdmit.add(lblAppointmentDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 105, 160, -1));

        btnClear.setBackground(new java.awt.Color(204, 204, 204));
        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        pnlAdmit.add(btnClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(1215, 30, -1, 42));

        lblIDError.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        lblIDError.setForeground(new java.awt.Color(204, 0, 0));
        pnlAdmit.add(lblIDError, new org.netbeans.lib.awtextra.AbsoluteConstraints(993, 162, 130, 20));
        lblIDError.getAccessibleContext().setAccessibleParent(tfFullName);

        lblAgeError.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        lblAgeError.setForeground(new java.awt.Color(204, 0, 0));
        pnlAdmit.add(lblAgeError, new org.netbeans.lib.awtextra.AbsoluteConstraints(237, 80, 140, 20));

        lblAddressError.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        lblAddressError.setForeground(new java.awt.Color(204, 0, 0));
        pnlAdmit.add(lblAddressError, new org.netbeans.lib.awtextra.AbsoluteConstraints(443, 83, 150, 20));

        lblGuardianError.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        lblGuardianError.setForeground(new java.awt.Color(204, 0, 0));
        pnlAdmit.add(lblGuardianError, new org.netbeans.lib.awtextra.AbsoluteConstraints(963, 83, 150, 20));

        lblContactError.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        lblContactError.setForeground(new java.awt.Color(204, 0, 0));
        pnlAdmit.add(lblContactError, new org.netbeans.lib.awtextra.AbsoluteConstraints(723, 83, 150, 20));

        lblFullNameError.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        lblFullNameError.setForeground(new java.awt.Color(204, 0, 0));
        pnlAdmit.add(lblFullNameError, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 81, 150, 20));

        lblGenderError.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        lblGenderError.setForeground(new java.awt.Color(204, 0, 0));
        pnlAdmit.add(lblGenderError, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, 130, 20));

        lblAppointmentError.setFont(new java.awt.Font("Segoe UI", 0, 8)); // NOI18N
        lblAppointmentError.setForeground(new java.awt.Color(204, 0, 0));
        pnlAdmit.add(lblAppointmentError, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 163, 150, 20));

        pnlSearch.setBackground(new java.awt.Color(204, 255, 255));

        tfSearchBox.setBackground(new java.awt.Color(204, 255, 255));
        tfSearchBox.setText("\n");
        tfSearchBox.setBorder(javax.swing.BorderFactory.createTitledBorder("Search in Patients"));
        tfSearchBox.setMinimumSize(new java.awt.Dimension(300, 80));
        tfSearchBox.setPreferredSize(new java.awt.Dimension(200, 60));

        btnSearch.setBackground(new java.awt.Color(204, 204, 204));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        cbSort.setBackground(new java.awt.Color(204, 255, 255));
        cbSort.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cbSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Patient ID", "Full Name", "Address", "Guardian", "Relation", "Department", "Appointment Date", "Consultant" }));

        btnSortByAsc.setBackground(new java.awt.Color(204, 204, 204));
        btnSortByAsc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/icaretrack/resources/asc_sorting.png"))); // NOI18N
        btnSortByAsc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortByAscActionPerformed(evt);
            }
        });

        btnSortByDesc.setBackground(new java.awt.Color(204, 204, 204));
        btnSortByDesc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/icaretrack/resources/dsc_sorting.png"))); // NOI18N
        btnSortByDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortByDescActionPerformed(evt);
            }
        });

        lblSortBy.setText("Sort By");

        cbFilter.setBackground(new java.awt.Color(204, 255, 255));
        cbFilter.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cbFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Patient ID", "Full Name", "Contact No.", "Guardian", "Department", "Consultant" }));

        lblFilter.setText("Filter By");

        javax.swing.GroupLayout pnlSearchLayout = new javax.swing.GroupLayout(pnlSearch);
        pnlSearch.setLayout(pnlSearchLayout);
        pnlSearchLayout.setHorizontalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tfSearchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblSortBy, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbSort, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSortByAsc, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSortByDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        pnlSearchLayout.setVerticalGroup(
            pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSearchLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFilter)))
                    .addComponent(tfSearchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbSort, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSortBy))
                        .addGroup(pnlSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSortByAsc, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSortByDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlPatientList.setBackground(new java.awt.Color(204, 255, 255));

        tblPatientDetails.setBackground(new java.awt.Color(204, 255, 255));
        tblPatientDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1001", "Nischal Thapa ", "28", "M", "Kathmandu-6	 Bagmati", "9841223302 ", "Sunita Thapa", "Mother", "Cardiology", "2022-09-15", "Dr. Aarav Adhikari"},
                {"1002", "Sarita Rai ", "35", "F", "Pokhara-15	 Gandaki", "9815226940 ", "Rajendra Rai", "Husband", "Orthopedics", "2022-10-05", "Dr. Anjali Gautam"},
                {"1003", "Aarav Sharma ", "45", "M", "Bharatpur-8	 Narayani", "9843567395 ", "Reena Sharma", "Wife", "Dermatology", "2022-11-10", "Dr. Siddharth Bhattarai"},
                {"1004", "Anushka Bhattarai ", "22", "F", "Birgunj-4	 Province 2", "9862345294 ", "Ramesh Bhattarai", "Father", "Neurology", "2022-12-22", "Dr. Alisha Shrestha"},
                {"1005", "Rohan Tamang ", "32", "M", "Butwal-9	 Lumbini", "9813890786 ", "Maya Tamang", "Sister", "Ophthalmology", "2023-01-17", "Dr. Sarthak Rijal"},
                {"1006", "Sadhana Gurung ", "38", "F", "Dharan-15	 Koshi", "9849123475 ", "Narayan Gurung", "Husband", "Gastroenterology", "2023-02-30", "Dr. Neha Maharjan"},
                {"1007", "Binod Lama ", "50", "M", "Janakpur-6	 Janakpur", "9854456254 ", "Laxmi Lama", "Wife", "Pediatrics", "2023-03-12", "Dr. Arjun Acharya"},
                {"1008", "Kriti Shah ", "29", "F", "Hetauda-3	 Bagmati", "9814789293 ", "Ravi Shah", "Brother", "Oncology", "2023-04-25", "Dr. Priya Joshi"},
                {"1009", "Ashish Bhandari ", "55", "M", "Damak-4	 Province 1", "9846234009 ", "Nisha Bhandari", "Wife", "Psychiatry", "2023-05-05", "Dr. Roshan Lama"},
                {"1010", "Priya Shrestha ", "42", "F", "Bhaktapur-10	 Bagmati", "9818901900 ", "Subash Shrestha", "Husband", "Cardiology", "2023-06-18", "Dr. Anaya Basnet"},
                {"1011", "Rajat Joshi ", "33", "M", "Itahari-7	 Koshi ", "9842876103 ", "Meera Joshi", "Wife", "Neurology", "2023-07-30", "Dr. Maya Karki"},
                {"1012", "Sandesh Ghimire", "24", "M", "Dhankuta -6 koshi", "9812240766", "Abid Sheikh", "Brother", "Cardiology", "2023-07-30", "Dr. Maya Karki"},
                {"1013", "Suman Khadka", "20", "M", "Itahari-7 Koshi", "9817543110", "Laxmi Khadka", "Wife", "Orthopedics", "2023-07-31", "Dr. Anjali Gautam"},
                {"1014", "Sangita Basnet", "33", "F", "Biratnagar-13 Koshi", "9812387465", "Bishal Basnet", "Brother", "Oncology", "2023-07-31", "Dr. Priya Joshi"},
                {"1015", "Anaya Maharjan", "45", "F", "Panauti -6 Bagmati", "9845674985", "Roshan Maharjan", "Father", "Dermatology", "2023-08-01", "Dr. Siddharth Bhattarai"},
                {"1016", "Aasha Rai", "18", "F", "Dhading -6 Bagmati", "9802376908", "Shova Rai", "Sister", "Gastroenterology", "2023-08-02", "Dr. Neha Maharjan"}
            },
            new String [] {
                "Patient ID", "Full Name", "Age ", "Gender", "Address", "Contact No.", "Guardian", "Relation", "Departments", "Appointment Date", "Consultant"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPatientDetails.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblPatientDetails.setEditingColumn(tblPatientDetails.getEditingColumn());
        tblPatientDetails.setEditingRow(tblPatientDetails.getEditingRow());
        tblPatientDetails.setOpaque(false);
        tblPatientDetails.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblPatientDetails.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblPatientDetails.getTableHeader().setResizingAllowed(false);
        tblPatientDetails.getTableHeader().setReorderingAllowed(false);
        tblPatientDetails.setUpdateSelectionOnSort(false);
        tblPatientDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPatientDetailsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPatientDetails);
        if (tblPatientDetails.getColumnModel().getColumnCount() > 0) {
            tblPatientDetails.getColumnModel().getColumn(0).setMaxWidth(60);
            tblPatientDetails.getColumnModel().getColumn(2).setMaxWidth(35);
            tblPatientDetails.getColumnModel().getColumn(3).setMinWidth(50);
            tblPatientDetails.getColumnModel().getColumn(3).setMaxWidth(60);
            tblPatientDetails.getColumnModel().getColumn(5).setMinWidth(100);
            tblPatientDetails.getColumnModel().getColumn(5).setMaxWidth(110);
            tblPatientDetails.getColumnModel().getColumn(7).setMaxWidth(100);
            tblPatientDetails.getColumnModel().getColumn(8).setMinWidth(100);
            tblPatientDetails.getColumnModel().getColumn(8).setMaxWidth(140);
            tblPatientDetails.getColumnModel().getColumn(9).setMinWidth(105);
            tblPatientDetails.getColumnModel().getColumn(9).setMaxWidth(130);
        }
        tblPatientDetails.getAccessibleContext().setAccessibleParent(pnlPatientList);

        lblTableTitle.setFont(new java.awt.Font("Thames", 0, 14)); // NOI18N
        lblTableTitle.setText("Patient's List");

        btnRefresh.setBackground(new java.awt.Color(51, 153, 255));
        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/icaretrack/resources/update.png"))); // NOI18N
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(255, 51, 51));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/icaretrack/resources/delete.png"))); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(255, 204, 0));
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/icaretrack/resources/delete.png"))); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPatientListLayout = new javax.swing.GroupLayout(pnlPatientList);
        pnlPatientList.setLayout(pnlPatientListLayout);
        pnlPatientListLayout.setHorizontalGroup(
            pnlPatientListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPatientListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTableTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(97, 97, 97))
            .addGroup(pnlPatientListLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPatientListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlPatientListLayout.setVerticalGroup(
            pnlPatientListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPatientListLayout.createSequentialGroup()
                .addComponent(lblTableTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPatientListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPatientListLayout.createSequentialGroup()
                        .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(27, 27, 27)
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlAdmit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlPatientList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlAdmit, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPatientList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
 * This method responsible for action performed while the search button pressed
 * in GUI.
 * @param evt 
 */
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        getCurrentTableData();// gets patient info in real time from table
        // the desired filter selected by user
        String filter = cbFilter.getSelectedItem().toString();
        // the last index of patient information list
        int high = currentPatientsList.size() - 1;
        // controller's object to perform search
        SortingAlgorithm sortModel = new SortingAlgorithm();
        // responsible for sort the patient info according to filter
        sortModel.sort(currentPatientsList, filter);
        // list to store searched patient information
        // responsible for searching
        List<ICareTrackModel> searchedModel = performBinarySearchAll(
        tfSearchBox.getText(), currentPatientsList, 0,high,
                filter
        );
        String foundMessage = searchedModel.size() + StringUtil.searchFound;
        // display message regarding search
        if(!searchedModel.isEmpty()){
            // Updates the table with sorted data
            setTable((ArrayList<ICareTrackModel>) searchedModel);
            JOptionPane.showMessageDialog(pnlSearch, 
                    foundMessage, "Search Succes", 
                    JOptionPane.INFORMATION_MESSAGE
            );
            tfSearchBox.setText("");
        }else{
            JOptionPane.showMessageDialog(pnlSearch, 
                    StringUtil.searchNotFound, "Not found", 
                    JOptionPane.INFORMATION_MESSAGE
            );
        }
        
    }//GEN-LAST:event_btnSearchActionPerformed
/**
 * this method responsible for sort by ascending while sort by ascending button
 * pressed in GUI
 * @param evt 
 */
    private void btnSortByAscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortByAscActionPerformed
        //gets real time patient's information from the patient table
        getCurrentTableData();
        // the desired filter selected by user
        String filter = cbSort.getSelectedItem().toString();
        // controller object for sorting
        SortingAlgorithm model = new SortingAlgorithm();
        model.sort(currentPatientsList,filter );
        setTable(currentPatientsList);// Updates the table with sorted data
    }//GEN-LAST:event_btnSortByAscActionPerformed
/**
 * this method responsible for refresh while refresh button pressed in GUI
 * @param evt 
 */
    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
         setTable(patientsList);// write table with main list
    }//GEN-LAST:event_btnRefreshActionPerformed
/**
 * this method responsible for admit of patient while admit button is clicked
 * @param evt 
 */
    private void btnAdmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdmitActionPerformed
        if(isAnyFieldInvalid()){ // checks for invalidity
            if(tfFullName.getText().isBlank()){ // checks blank fields
                tfFullName.setBorder(javax.swing.BorderFactory.
                        createTitledBorder(javax.swing.BorderFactory.
                        createLineBorder(new java.awt.
                         Color(204, 0, 0)), "Full Name", 
           javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, 
           javax.swing.border.TitledBorder.DEFAULT_POSITION, new java
                    .awt.Font("Segoe UI", 0, 12), new java.awt.
                          Color(204, 0, 0))
                ); // display error message
                lblFullNameError.setText(StringUtil.fullNameBlank);
            }
            
            if(tfAge.getText().isBlank()){
                tfAge.setBorder(javax.swing.BorderFactory.createTitledBorder(
                javax.swing.BorderFactory.createLineBorder(new java.awt.
                      Color(204, 0, 0)), "Age", javax.
                      swing.border.TitledBorder.DEFAULT_JUSTIFICATION, 
           javax.swing.border.TitledBorder.DEFAULT_POSITION, new java
                   .awt.Font("Segoe UI", 0, 12), new java.awt.Color(
                           204, 0, 0))
                );// display error message
                lblAgeError.setText(StringUtil.ageBlank);
            }else if(Integer.parseInt(tfAge.getText().trim()) > 120){
                tfAge.setBorder(javax.swing.BorderFactory.createTitledBorder(
                  javax.swing.BorderFactory.createLineBorder(new java
                        .awt.Color(204, 0, 0)), "Age",
          javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, 
          javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.
                  awt.Font("Segoe UI", 0, 12), new java.awt.
                          Color(204, 0, 0))
                ); // display error message
                lblAgeError.setText(StringUtil.invalidAge);
            }
            
            if(!(rbFemale.isSelected() || rbMale.isSelected())){
                lblGenderError.setText(StringUtil.emptyGender);
            }
            if(tfAdddress.getText().isBlank()){
                tfAdddress.setBorder(javax.swing.BorderFactory.
                        createTitledBorder(javax.swing.BorderFactory.
                        createLineBorder(new java.awt.Color(204, 0, 0)), 
                   "Address", javax.swing.border.TitledBorder
                        .DEFAULT_JUSTIFICATION, javax.swing.border.
                        TitledBorder.DEFAULT_POSITION, new java.awt.Font(
                    "Segoe UI", 0, 12), new java.awt.Color(204, 
                      0, 0))
                );// display error message
                lblAddressError.setText(StringUtil.emptyAddress);
            }
            if(tfGuardian.getText().isBlank()){
                tfGuardian.setBorder(javax.swing.BorderFactory.
                        createTitledBorder(javax.swing.BorderFactory.
                        createLineBorder(new java.awt.Color(204, 0, 0)), 
                   "Guardian", javax.swing.border.TitledBorder
                        .DEFAULT_JUSTIFICATION, javax.swing.border.
                        TitledBorder.DEFAULT_POSITION, new java.awt.Font(
                    "Segoe UI", 0, 12), new java.awt.Color(204, 
                      0, 0))
                );// display error message
                lblGuardianError.setText(StringUtil.emptyGuardian);
            }
            
            if(tfContactNo.getText().isBlank()){
                tfContactNo.setBorder(javax.swing.BorderFactory.
                        createTitledBorder(javax.swing.BorderFactory.
                        createLineBorder(new java.awt.Color(204, 0, 0)),
                   "Contact No.", javax.swing.border.
                        TitledBorder.DEFAULT_JUSTIFICATION, javax.
                        swing.border.TitledBorder.DEFAULT_POSITION, new java.awt
                        .Font("Segoe UI", 0, 12), new java.awt.
                        Color(204, 0, 0))
                );// display error message
                lblContactError.setText(StringUtil.emptyContact);
            }else if(tfContactNo.getText().length() < 6){
                tfContactNo.setBorder(javax.swing.BorderFactory.
                        createTitledBorder(javax.swing.BorderFactory.
                        createLineBorder(new java.awt.Color(204, 0, 0)), 
                   "Contact No.", javax.swing.border.
                        TitledBorder.DEFAULT_JUSTIFICATION, javax.
                        swing.border.TitledBorder.DEFAULT_POSITION, new java.awt
                        .Font("Segoe UI", 0, 12), new java.awt.
                        Color(204, 0, 0))
                ); // display error message
                lblContactError.setText(StringUtil.lessContact);
            }
            
            if(jdcAppointmentDate.getDate() == null){
                lblAppointmentError.setText(StringUtil.emptyDOA);
            }
            
            if(tfPatientId.getText().isBlank()){
                tfPatientId.setBorder(javax.swing.BorderFactory.
                        createTitledBorder(javax.swing.BorderFactory.
                        createLineBorder(new java.awt.Color(204, 0, 0)), 
                   "Patient ID", javax.swing.border.
                        TitledBorder.DEFAULT_JUSTIFICATION, javax.
                        swing.border.TitledBorder.DEFAULT_POSITION, new java.awt
                        .Font("Segoe UI", 0, 12), new java.awt.
                        Color(204, 0, 0))
                ); // display error message
                lblIDError.setText(StringUtil.emptyID);
            }else if(tfPatientId.getText().length() < 4){
                tfPatientId.setBorder(javax.swing.BorderFactory.
                        createTitledBorder(javax.swing.BorderFactory.
                        createLineBorder(new java.awt.Color(204, 0, 0)), 
                   "Patient ID", javax.swing.border.
                        TitledBorder.DEFAULT_JUSTIFICATION, javax.
                        swing.border.TitledBorder.DEFAULT_POSITION, new java.awt
                        .Font("Segoe UI", 0, 12), new java.awt.
                        Color(204, 0, 0))
                ); // display error message
                lblIDError.setText(StringUtil.lessID);
            }
            // display error message for any of fields is invalid
            JOptionPane.showMessageDialog(pnlSearch, 
                    StringUtil.invalidField, "Invalid Info", 
                    JOptionPane.WARNING_MESSAGE
            );
        }else{
            try
            {
                // stores the inputs in relevat variables 
                int patientId = Integer.parseInt(tfPatientId.getText().trim());
                String fullName = tfFullName.getText();
                int age = Integer.parseInt(tfAge.getText().trim());
                String gender;
                if(rbMale.isSelected()){
                    gender = "M";
                }else if(rbFemale.isSelected()){
                    gender = "F";
                }else{
                    gender = "";
                }
                String address = tfAdddress.getText();
                String contact = tfContactNo.getText();
                String guardian = tfGuardian.getText();
                String relation = cbRelation.getSelectedItem().toString();
                String department = cbDepartment.getSelectedItem().toString();

                Date selectedDate = jdcAppointmentDate.getDate();
                // Format the selected date using the obtained date format
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String dateOfAppointment = sdf.format(selectedDate);

                String consultant = cbConsultant.getSelectedItem().toString();
                
                // Initialize the patient ID index as not found
                int patientIDIndex = -1; 
                // checks for id duplication in main list
                for (int i = 0; i < patientsList.size(); i++) {
                    ICareTrackModel checkPatientID = patientsList.get(i);
                    if (checkPatientID.getPatientId() == patientId) {
                        // Store the index of the existing object
                        patientIDIndex = i; 
                        break;
                    }
                }
                // if user makes fresh entries
                if("ADMIT".equals(btnAdmit.getText())){
                    if(patientIDIndex != -1){
                        JOptionPane.showMessageDialog(pnlSearch, 
                        StringUtil.admitFailed,"Admit failed", 
                        JOptionPane.WARNING_MESSAGE
                        );
                        lblIDError.setText(StringUtil.idTaken);
                    }else{
                        // Adds new data to main patientsList
                    ICareTrackModel admit = new ICareTrackModel(patientId, 
                            fullName, age, gender, address, contact,
                            guardian,relation,department, dateOfAppointment
                            , consultant);
                    patientsList.add(admit);
                    JOptionPane.showMessageDialog(pnlSearch, 
                            StringUtil.admitted, "Admitted" 
                            , JOptionPane.INFORMATION_MESSAGE
                    );
                    setTable(patientsList);
                    tblPatientDetails.clearSelection(); // Deselect all rows
                    // clears all entered data from input fields
                    clearAllInputFields(); 
                    }
                }else{ // if user modifying the available information
                    // new object to replace it with available one
                    ICareTrackModel replace = new ICareTrackModel(patientId, 
                            fullName, age, gender, address, contact,
                            guardian,relation,department, 
                            dateOfAppointment, consultant
                    );
                    // responsible for replacement
                    patientsList.set(patientIDIndex,replace);
                    setTable(patientsList);// update table
                    tblPatientDetails.clearSelection(); // Deselect all rows
                    // clears all entered data from input fields
                    clearAllInputFields(); 
                    JOptionPane.showMessageDialog(pnlSearch, 
                            StringUtil.replaced, "Replaced" , 
                            JOptionPane.INFORMATION_MESSAGE
                    );// display message for replacement
                    btnAdmit.setText("ADMIT");
                    btnAdmit.setBackground(new Color(0,102,51));
                    btnClear.setText("CLEAR");
                    btnUpdate.setVisible(true);
                    tfPatientId.setEditable(true);
                }
            }catch(NumberFormatException e){
                JOptionPane.showMessageDialog(pnlSearch, 
                        StringUtil.formatError, "Format Error"
                        , JOptionPane.ERROR_MESSAGE
                );// catch for exception
            }
        }
        
    }//GEN-LAST:event_btnAdmitActionPerformed
/**
 * this method responsible for sort by descending order according to filter
 * selected by user
 * @param evt 
 */
    private void btnSortByDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortByDescActionPerformed
        // gets real time patient information from patient table
        getCurrentTableData();
        // controller object responsible for sort
        SortingAlgorithm model = new SortingAlgorithm();
        model.sort(currentPatientsList, cbSort.getSelectedItem().
                toString()
        );
        // a copy of the sorted list
        ArrayList<ICareTrackModel> descendedCurrentPatientsList = new 
        ArrayList<>(currentPatientsList);
        // method to reverse the copied list 
        Collections.reverse(descendedCurrentPatientsList);
        // Updates the table with sorted data
        setTable(descendedCurrentPatientsList);
    }//GEN-LAST:event_btnSortByDescActionPerformed
    /**
     * method responsible set edit panel to modify the patient information
     * on double click in patient table
     * @param evt 
     */
    private void tblPatientDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPatientDetailsMouseClicked
        if(evt.getClickCount()==2){ // triggers if  double mouse click
            setEditPanel(); // sets the editing panel
        }
    }//GEN-LAST:event_tblPatientDetailsMouseClicked
    /**
     * method responsible for set edit panel if the patient is selected 
     * otherwise display relevant message
     * @param evt 
     */
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // selected row index
        int selectedPatientListRow = tblPatientDetails.getSelectedRow();
        if(selectedPatientListRow != -1){
            setEditPanel(); // sets edit panel
        }else{
            JOptionPane.showMessageDialog(pnlSearch, 
                    StringUtil.selectPatient, "No patient selected", 
                    JOptionPane.ERROR_MESSAGE
            ); // display relevant message to select the patient first
        }
    }//GEN-LAST:event_btnUpdateActionPerformed
    /**
     * method responsible to delete the patient information permanently in the 
     * patient is selected otherwise displays relevant information
     * @param evt 
     */
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // selected index
        int selectedPatientListRow = tblPatientDetails.getSelectedRow();
        // handle for button click without selectin patient
        if(selectedPatientListRow == -1){
            JOptionPane.showMessageDialog(pnlSearch, 
                StringUtil.selectToDelete, "No row Selected", 
                JOptionPane.WARNING_MESSAGE
            );// displays message for selection
        }else{
            // detection for modification processs 
            if(!"ADMIT".equals(btnAdmit.getText())){
                int option = JOptionPane.showConfirmDialog(pnlSearch,
                 StringUtil.editProgress, "Edit in progress", 
                 JOptionPane.YES_NO_OPTION, JOptionPane.
                 WARNING_MESSAGE
                );// displays message for modification process
                if(option==0){
                    // deletes the patient information permanently
                    deleteFromMainList(selectedPatientListRow);
                }
            }else{
                // handle for normal 
                int option = JOptionPane.showConfirmDialog(pnlSearch,
                    StringUtil.confirmDelete, "Delete Confirmation", 
                 JOptionPane.YES_NO_OPTION,JOptionPane
                          .WARNING_MESSAGE
                ); // asks for confirmation
                if(option==0){
                    // deletes patient information permanently
                    deleteFromMainList(selectedPatientListRow);
                }
            }
            
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
    /**
     * this method responsible for clear all the input which is made by user 
     * in input field in real time
     * if user is modifying the patient information then it cancel the 
     * modification process and clear the field
     * @param evt 
     */
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        cancelOperation(); // clear input fields and change button labels 
        lblAddressError.setText("");
        lblFullNameError.setText("");
        lblAgeError.setText("");
        lblContactError.setText("");
        lblGuardianError.setText("");
        lblAppointmentError.setText("");
        lblGenderError.setText("");
        lblIDError.setText("");
        
        tfPatientId.setBorder(javax.swing.BorderFactory.
                    createTitledBorder("Patient ID")
            ); // turns border to normal
        tfGuardian.setBorder(javax.swing.BorderFactory.
                    createTitledBorder("Guardian")
             );// turns border to normal
        tfContactNo.setBorder(javax.swing.BorderFactory.
                    createTitledBorder("Contact No.")
            ); // turns the border to normal
        tfAge.setBorder(javax.swing.BorderFactory.createTitledBorder(
                     "Age")
             ); // turns the border to normal
        tfFullName.setBorder(javax.swing.BorderFactory.
                    createTitledBorder("Full Name")
             ); // turns the fields to normal
        tfAdddress.setBorder(javax.swing.BorderFactory.
                    createTitledBorder("Address")
            );// turns the border to normal
    }//GEN-LAST:event_btnClearActionPerformed
    /**
     * this method is responsible for error handling in real time when user 
     * is providing the patient's name in input fields
     * @param evt 
     */
    private void tfFullNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfFullNameKeyTyped
        char inputKey = evt.getKeyChar(); // key typed value
        int keyCode = (int)inputKey; // converts as ASCII code
        // checks for number and symbol
        if(!Character.isLetter(inputKey) && !Character.isWhitespace(
                inputKey)){
            evt.consume();// prevent from typing
        }
        // checks for number and symbols and display warning message
        if ((keyCode<=126 && keyCode >= 123 )|| (keyCode <= 96 && keyCode >= 91) 
                || (keyCode <= 64 && keyCode >= 58) || (keyCode <= 47 && 
                keyCode>=33)) {
            tfFullName.setBorder(javax.swing.BorderFactory.
                    createTitledBorder(javax.swing.BorderFactory.
                    createLineBorder(new java.awt.Color(204, 0, 0)), 
               "Full Name", javax.swing.border.TitledBorder.
                    DEFAULT_JUSTIFICATION, javax.swing.border.
                    TitledBorder.DEFAULT_POSITION, new java.awt.Font(
                "Segoe UI", 0, 12), new java.awt.Color(204, 
                  0, 0))
            ); // turns the field to red
            lblFullNameError.setText(StringUtil.symbols);
        }
        else if (keyCode >= 48 && keyCode <= 57){
           tfFullName.setBorder(javax.swing.BorderFactory.
                   createTitledBorder(javax.swing.BorderFactory.
                   createLineBorder(new java.awt.Color(204, 0, 0)), 
              "Full Name", javax.swing.border.TitledBorder.
                   DEFAULT_JUSTIFICATION, javax.swing.border.
                   TitledBorder.DEFAULT_POSITION, new java.awt.Font(
               "Segoe UI", 0, 12), new java.awt.Color(204, 0,
                 0))
           ); // turns the fields to red
           lblFullNameError.setText(StringUtil.numbers);
        }else{
             tfFullName.setBorder(javax.swing.BorderFactory.
                    createTitledBorder("Full Name")
             ); // turns the fields to normal
             lblFullNameError.setText("");
        }
    }//GEN-LAST:event_tfFullNameKeyTyped
    /**
     * this method is responsible to prevent invalid input for age
     * @param evt 
     */
    private void tfAgeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfAgeKeyTyped
        // TODO add your handling code here:
        char inputKey = evt.getKeyChar();
        int keyCode = (int)inputKey;
        String age = tfAge.getText();
        if(!Character.isDigit(inputKey)){
            evt.consume(); // prevent typing except numbers
        }
        // allow only 3 digit of age
        if(age.length() >= 3){
            evt.consume();
        }
        // handles for symbols
        if ((keyCode<=126 && keyCode >= 123 )|| (keyCode <= 96 && keyCode >= 91) 
                || (keyCode <= 64 && keyCode >= 58) || (keyCode <= 47 && 
                keyCode>=33)) 
        {
            tfAge.setBorder(javax.swing.BorderFactory.createTitledBorder(
              javax.swing.BorderFactory.createLineBorder(new java.awt.
                    Color(204, 0, 0)), "Age", javax.
                    swing.border.TitledBorder.DEFAULT_JUSTIFICATION, 
         javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.
                    awt.Font("Segoe UI", 0, 12), new java.awt.
                    Color(204, 0, 0))
            ); // turns the border red
            lblAgeError.setText(StringUtil.symbols);
        }
        // handles for alphabets
        else if ((keyCode >= 65 && keyCode <= 90) || (keyCode >= 97 && keyCode 
                <= 122))
        {
           tfAge.setBorder(javax.swing.BorderFactory.createTitledBorder(
             javax.swing.BorderFactory.createLineBorder(new java.awt.
                   Color(204, 0, 0)), "Age", javax.
                   swing.border.TitledBorder.DEFAULT_JUSTIFICATION, 
        javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.
                   awt.Font("Segoe UI", 0, 12), new java.awt.Color(
                 204, 0, 0))
           ); // turn the border red
           lblAgeError.setText(StringUtil.alphabets);
        }else{
             tfAge.setBorder(javax.swing.BorderFactory.createTitledBorder(
                     "Age")
             ); // turns the border to normal
             lblAgeError.setText("");
        }
    }//GEN-LAST:event_tfAgeKeyTyped
    /**
     * This method handle the invalid input for contact number by user in real
     * time
     * @param evt 
     */
    private void tfContactNoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfContactNoKeyTyped
        // keyboard input key value
        char inputKey = evt.getKeyChar();
        int keyCode = (int)inputKey; // converted ASCII values
        String contact = tfContactNo.getText(); // user input 
        if(!Character.isDigit(inputKey)){
            evt.consume(); // prevent typing except number
        }
        if(contact.length() >= 10){
            evt.consume(); // prevent typing for more than 10 digits
        }
        // handles for symbols
        if ((keyCode<=126 && keyCode >= 123 )|| (keyCode <= 96 && keyCode >= 91)
                || (keyCode <= 64 && keyCode >= 58) || (keyCode <= 47 && 
                keyCode>=33)) 
        {
            tfContactNo.setBorder(javax.swing.BorderFactory.
                    createTitledBorder(javax.swing.BorderFactory.
                    createLineBorder(new java.awt.Color(204, 0, 0)), 
               "Contact No.", javax.swing.border.TitledBorder
                    .DEFAULT_JUSTIFICATION, javax.swing.border.
                    TitledBorder.DEFAULT_POSITION, new java.awt.Font(
                "Segoe UI", 0, 12), new java.awt.Color(204, 0,
                  0))
            ); //turns border red
            lblContactError.setText(StringUtil.symbols);
        }
        // handles for alphabets
        else if ((keyCode >= 65 && keyCode <= 90) || (keyCode >= 97 && keyCode 
                <= 122))
        {
            tfContactNo.setBorder(javax.swing.BorderFactory.
                    createTitledBorder(javax.swing.BorderFactory.
                    createLineBorder(new java.awt.Color(204, 0, 0)), 
               "Contact No.", javax.swing.border.TitledBorder
                    .DEFAULT_JUSTIFICATION, javax.swing.border.
                    TitledBorder.DEFAULT_POSITION, new java.awt.Font(
                "Segoe UI", 0, 12), new java.awt.Color(204, 0,
                  0))
            ); //turns border red
           lblContactError.setText(StringUtil.alphabets);
        }else{
            tfContactNo.setBorder(javax.swing.BorderFactory.
                    createTitledBorder("Contact No.")
            ); // turns the border to normal
            lblContactError.setText("");
        }
    }//GEN-LAST:event_tfContactNoKeyTyped
    /**
     * This method handle invalid input for Guardian name by user in real time
     * @param evt 
     */
    private void tfGuardianKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfGuardianKeyTyped
        // keyboard input key value
        char inputKey = evt.getKeyChar();
        int keyCode = (int)inputKey;// converted ASCII values
        if(!Character.isLetter(inputKey) && !Character.isWhitespace(
                inputKey))
        {
            evt.consume(); // prevents typing except alphabets
        }
        // handles for symbols
        if ((keyCode<=126 && keyCode >= 123 )|| (keyCode <= 96 && keyCode >= 91)
                || (keyCode <= 64 && keyCode >= 58) || (keyCode <= 47 && 
                keyCode>=33)) 
        {
            tfGuardian.setBorder(javax.swing.BorderFactory.
                    createTitledBorder(javax.swing.BorderFactory.
                    createLineBorder(new java.awt.Color(204, 0, 0)), 
               "Guardian", javax.swing.border.TitledBorder.
                    DEFAULT_JUSTIFICATION, javax.swing.border.
                    TitledBorder.DEFAULT_POSITION, new java.awt.Font(
                "Segoe UI", 0, 12), new java.awt.Color(204, 0,
                  0))
            ); // turns border red
            lblGuardianError.setText(StringUtil.symbols);
        }
        // handles for numbers
        else if (keyCode >= 48 && keyCode <= 57){
           tfGuardian.setBorder(javax.swing.BorderFactory.
                   createTitledBorder(javax.swing.BorderFactory.
                   createLineBorder(new java.awt.Color(204, 0, 0)), 
              "Guardian", javax.swing.border.TitledBorder.
                   DEFAULT_JUSTIFICATION, javax.swing.border.
                   TitledBorder.DEFAULT_POSITION, new java.awt.Font(
               "Segoe UI", 0, 12), new java.awt.Color(204, 0, 
                 0))
           ); // turns border red
           lblGuardianError.setText(StringUtil.numbers);
        }else{
             tfGuardian.setBorder(javax.swing.BorderFactory.
                    createTitledBorder("Guardian")
             );// turns border to normal
             lblGuardianError.setText("");
        }
    }//GEN-LAST:event_tfGuardianKeyTyped
    /**
     * This method handles for invalid input for patient id provided by user in 
     * real time
     * @param evt 
     */
    private void tfPatientIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfPatientIdKeyTyped
        // keyboard input value
        char inputKey = evt.getKeyChar();
        int keyCode = (int)inputKey;// converted ASCII value of keyboard key
        String patientID = tfPatientId.getText();// user input
        if(!Character.isDigit(inputKey)){
            evt.consume(); // prevent from typing except numbers
        }
        if(patientID.length() >= 5){
            evt.consume(); // prevents from typing for more than 5 digit
        }
        // handles for symbols
        if ((keyCode<=126 && keyCode >= 123 )|| (keyCode <= 96 && keyCode >= 91)
                || (keyCode <= 64 && keyCode >= 58) || (keyCode <= 47 && 
                keyCode>=33)) 
        {
            tfPatientId.setBorder(javax.swing.BorderFactory.
                    createTitledBorder(javax.swing.BorderFactory.
                    createLineBorder(new java.awt.Color(204, 0, 0)), 
               "Patient ID", javax.swing.border.TitledBorder.
                    DEFAULT_JUSTIFICATION, javax.swing.border.
                    TitledBorder.DEFAULT_POSITION, new java.awt.Font(
                "Segoe UI", 0, 12), new java.awt.Color(204, 0, 
                  0))
            ); // turns border to red
            lblIDError.setText(StringUtil.symbols);
        }
        // handles for alphabets
        else if ((keyCode >= 65 && keyCode <= 90) || (keyCode >= 97 && keyCode
                <= 122))
        {
           tfPatientId.setBorder(javax.swing.BorderFactory.
                   createTitledBorder(javax.swing.BorderFactory.
                   createLineBorder(new java.awt.Color(204, 0, 0)), 
              "Patient ID", javax.swing.border.TitledBorder.
                   DEFAULT_JUSTIFICATION, javax.swing.border.
                   TitledBorder.DEFAULT_POSITION, new java.awt.Font(
               "Segoe UI", 0, 12), new java.awt.Color(204, 0, 
                 0))
           ); // turns border to red
           lblIDError.setText(StringUtil.alphabets);
        }else{
            tfPatientId.setBorder(javax.swing.BorderFactory.
                    createTitledBorder("Patient ID")
            ); // turns border to normal
            lblIDError.setText("");
        }
    }//GEN-LAST:event_tfPatientIdKeyTyped
    /**
     * This method responsible to disable error message if user click in it
     * @param evt 
     */
    private void rbMaleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbMaleMouseClicked
        // remove the error message
        if(rbMale.isSelected()){
            lblGenderError.setText("");
        }
    }//GEN-LAST:event_rbMaleMouseClicked
    /**
     * This method responsible to prevent invalid input for address of patient
     * provided by user in real time
     * @param evt 
     */
    private void tfAdddressKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfAdddressKeyTyped
        // keyboard input value
        char inputKey = evt.getKeyChar();
        int keyCode = (int)inputKey; // converted ASCII values
        // handles the inappropriate symbols for address
        if(!((keyCode== 44 || keyCode == 45 || keyCode == 40 || keyCode == 41 || 
                keyCode == 32 || keyCode == 8 || keyCode == 27 || keyCode == 127
                || keyCode == 13) || (keyCode >= 48 && keyCode <= 57) || (
                keyCode >= 65 && keyCode <= 90) || (keyCode >= 97 && keyCode <= 
                122)))
        {
            evt.consume();// prevent typing for symbols
            tfAdddress.setBorder(javax.swing.BorderFactory.
                    createTitledBorder(javax.swing.BorderFactory.
                    createLineBorder(new java.awt.Color(204, 0, 0)), 
               "Address", javax.swing.border.TitledBorder.
                    DEFAULT_JUSTIFICATION, javax.swing.border.
                    TitledBorder.DEFAULT_POSITION, new java.awt.Font(
                "Segoe UI", 0, 12), new java.awt.Color(204, 0,
                  0))
            );// Turns border to red
            lblAddressError.setText(StringUtil.invalidChar);
        }else{
            tfAdddress.setBorder(javax.swing.BorderFactory.
                    createTitledBorder("Address")
            );// turns the border to normal
            lblAddressError.setText("");
        }
        
    }//GEN-LAST:event_tfAdddressKeyTyped
    /**
     * This method responsible for disable error message after the selection
     * of appointment date by user in real time
     * @param evt 
     */
    private void jdcAppointmentDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcAppointmentDatePropertyChange
        lblAppointmentError.setText("");// removes the error message
    }//GEN-LAST:event_jdcAppointmentDatePropertyChange
    /**
     * This method responsible to disable error message after selection of
     * gender of patient by user in real time
     * @param evt 
     */
    private void rbFemaleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbFemaleMouseClicked
        // disable the error message
        if(rbFemale.isSelected()){
            lblGenderError.setText("");
        }
    }//GEN-LAST:event_rbFemaleMouseClicked

    /**
     * This method reads the patient table information and write to main 
     * arrayList of patient information to perform further tasks.
     */
    public void getAllTableData() {
        int row = tblPatientDetails.getRowCount();
        
        for (int i = 0; i < row; i++) {
            ICareTrackModel model = new ICareTrackModel(
            Integer.parseInt(tblPatientDetails.getValueAt(i, 0).
                    toString()),
            tblPatientDetails.getValueAt(i, 1).toString(), 
            Integer.parseInt(tblPatientDetails.getValueAt(i, 2).
                    toString()), 
            tblPatientDetails.getValueAt(i, 3).toString(), 
            tblPatientDetails.getValueAt(i, 4).toString(), 
            tblPatientDetails.getValueAt(i, 5).toString(),
            tblPatientDetails.getValueAt(i, 6).toString(),
            tblPatientDetails.getValueAt(i, 7).toString(),
            tblPatientDetails.getValueAt(i, 8).toString(),
            tblPatientDetails.getValueAt(i, 9).toString(),
            tblPatientDetails.getValueAt(i, 10).toString()
            );
            patientsList.add(model);
        }
    }
    /**
     * This method reads the patient table information during sub tasks such as 
     * sort, search, etc and write to current
     * arrayList of patient information to perform temporary tasks.
     */
    public void getCurrentTableData() {
        currentPatientsList.clear();
        int row = tblPatientDetails.getRowCount();
        
        for (int i = 0; i < row; i++) {
            ICareTrackModel model = new ICareTrackModel(
            Integer.parseInt(tblPatientDetails.getValueAt(i, 
                    0).toString()),
            tblPatientDetails.getValueAt(i, 1).toString(), 
            Integer.parseInt(tblPatientDetails.getValueAt(i, 2).toString()),
            tblPatientDetails.getValueAt(i, 3).toString(), 
            tblPatientDetails.getValueAt(i, 4).toString(), 
            tblPatientDetails.getValueAt(i, 5).toString(),
            tblPatientDetails.getValueAt(i, 6).toString(),
            tblPatientDetails.getValueAt(i, 7).toString(),
            tblPatientDetails.getValueAt(i, 8).toString(),
            tblPatientDetails.getValueAt(i, 9).toString(),
            tblPatientDetails.getValueAt(i, 10).toString()
            );
            currentPatientsList.add(model);
        }
    }
    /**
     * This method is responsible for cancel the modification process and 
     * clear all input fields.
     */
    private void cancelOperation(){
        clearAllInputFields(); // clears all input field
        // changes the button label to admit and clear
        btnAdmit.setBackground(new Color(0,102,51));
        btnAdmit.setText("ADMIT");
        btnClear.setText("Clear");
        btnUpdate.setVisible(true);
        tfPatientId.setEditable(true);
    }
    /**
     * This method responsible for deleting the patient information from the 
     * main patient list and update the patient table
     * @param selectedPatientListRow the user selection 
     */
    private void deleteFromMainList(int selectedPatientListRow){
        getCurrentTableData(); // gets current patient list
        ICareTrackModel selectedPatient = currentPatientsList.get(
                selectedPatientListRow);// gets selected patient
        int selectedPatientId = selectedPatient.getPatientId();// gets patientID
        int patientIDIndex = -1; // Initialize the patient ID index as not found
        // checks for id index in main list
        for (int i = 0; i < patientsList.size(); i++) {
            ICareTrackModel checkPatientID = patientsList.get(i);
            if (checkPatientID.getPatientId() == selectedPatientId) {
                patientIDIndex = i; // Store the index of the existing object
                break;
            }
        }
        // removes from the main patient list
        patientsList.remove(patientIDIndex);
        // Updates the patient table
        setTable(patientsList);
        cancelOperation(); // cancel the editing or entry operation
        JOptionPane.showMessageDialog(pnlSearch, StringUtil.
                deleted, "Deleted", JOptionPane.
                INFORMATION_MESSAGE
        );// displays relevant message after deletion
    }
    
    /**
     * This method is responsible for updating table with respective patient 
     * information list
     * @param newData 
     */
    public void setTable(ArrayList<ICareTrackModel> newData){
        // Clears existing rows of the Patient's list
        tableModel.setRowCount(0); 
        // Populate the table
        for (ICareTrackModel rowData : newData) {
            Object[] row = { rowData.getPatientId(), rowData.getFullName(),
                rowData.getAge(), rowData.getGender(),rowData.getAddress(),
                rowData.getContactNo(), rowData.getGuardian(), rowData.
                getRelation(),rowData.getDepartment(), rowData.getDateOA(),
                rowData.getConsultant()
            };
            tableModel.addRow(row);
        }
    }
    /**
     * This method checks for invalidity of user input
     * @return 
     */
    public boolean isAnyFieldInvalid() {
        JTextField[] textFields = {tfPatientId,tfFullName, tfAge,tfAdddress, 
            tfContactNo, tfGuardian
        };

        // Checks text fields
        for(JTextField textField : textFields) {
            if (textField.getText().isEmpty()) {
                return true; // If found an empty text field
            }
        }
        if(tfPatientId.getText().length() < 4){
            return true; // if patient id less than 4 digit
        }
        if(jdcAppointmentDate.getDate() == null) {  // Checks the date chooser
            return true; // if Date chooser is empty
        }else{
            // if gender is not selected
            return bgGender.getSelection() == null;
        }
    }
        
    /**
     * This method is responsible to clear all the input field.
     */
    public void clearAllInputFields(){
        JTextField[] textFields = {tfPatientId,tfFullName, tfAge,tfAdddress, 
            tfContactNo, tfGuardian
        }; 

        // Clears all text fields
        for (JTextField textField : textFields) {
            textField.setText("");
        }
        
        // sets  all combobox to 0 index
        cbDepartment.setSelectedIndex(0);
        cbRelation.setSelectedIndex(0);
        cbConsultant.setSelectedIndex(0);
        
        
        // Resets the date chooser of appointment date to null
        jdcAppointmentDate.setDate(null);
        
        //resets the radio button for gender
        bgGender.clearSelection();
    }
    /**
     * This method is responsible for setting up the edit panel with respective 
     * patient information.
     */
    private void setEditPanel(){
        // sets a border to highlight the edit panel
        Border yellowBorder = new LineBorder(new Color(255,204,0), 5);
        pnlAdmit.setBorder(yellowBorder);
        int option = JOptionPane.showConfirmDialog(pnlAdmit, 
                StringUtil.edit, "Edit", JOptionPane.
                        YES_NO_OPTION ,JOptionPane.WARNING_MESSAGE
        );// displays a confirmation message

        if(option == 0){
            // Change the admit and clear button label to edit and cancel
            btnAdmit.setText("EDIT");
            btnClear.setText("CANCEL");
            btnUpdate.setVisible(false);
            btnAdmit.setBackground(new Color(255,204,0));
            // gets current patient information list
            getCurrentTableData();
            // gets selected patient information
            ICareTrackModel selectedPatient = currentPatientsList.get(
                    tblPatientDetails.getSelectedRow()
            );
            int patientId = selectedPatient.getPatientId();
            String fullName = selectedPatient.getFullName();
            int age = selectedPatient.getAge();
            String gender = selectedPatient.getGender();
            String address = selectedPatient.getAddress();
            String contact = selectedPatient.getContactNo();
            String guardian = selectedPatient.getGuardian();
            String relation = selectedPatient.getRelation();
            String department = selectedPatient.getDepartment();
            String dateOfAppointment = selectedPatient.getDateOA();
            String consultant = selectedPatient.getConsultant();
            // sets the input fields by selected pateint information
            tfFullName.setText(fullName);
            tfAge.setText(String.valueOf(age));
            rbMale.setSelected("M".equals(gender));
            rbFemale.setSelected("F".equals(gender));
            tfAdddress.setText(address);
            tfContactNo.setText(contact);
            tfGuardian.setText(guardian);
            cbRelation.setSelectedItem(relation);
            cbConsultant.setSelectedItem(consultant);
            tfPatientId.setText(String.valueOf(patientId));
            tfPatientId.setEditable(false);
            cbDepartment.setSelectedItem(department);
            try{
            SimpleDateFormat dateFormat = new SimpleDateFormat(
                    "yyyy-MM-dd");
            Date date = dateFormat.parse(dateOfAppointment);
            jdcAppointmentDate.setDate(date);
            } catch(ParseException e){
                JOptionPane.showMessageDialog(pnlSearch, 
                    StringUtil.dateError, "Date format error", 
                    JOptionPane.ERROR_MESSAGE
                );
            }
            pnlAdmit.setBorder(null); // redo the edit panel border
        }else{
            pnlAdmit.setBorder(null);// redo the edit panel border
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ICareTrack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ICareTrack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ICareTrack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ICareTrack.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ICareTrack().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgGender;
    private javax.swing.JButton btnAdmit;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSortByAsc;
    private javax.swing.JButton btnSortByDesc;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbConsultant;
    private javax.swing.JComboBox<String> cbDepartment;
    private javax.swing.JComboBox<String> cbFilter;
    private javax.swing.JComboBox<String> cbRelation;
    private javax.swing.JComboBox<String> cbSort;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdcAppointmentDate;
    private javax.swing.JLabel lblAddressError;
    private javax.swing.JLabel lblAgeError;
    private javax.swing.JLabel lblAppointmentDate;
    private javax.swing.JLabel lblAppointmentError;
    private javax.swing.JLabel lblConsultant;
    private javax.swing.JLabel lblContactError;
    private javax.swing.JLabel lblDepartment;
    private javax.swing.JLabel lblEntryHeading;
    private javax.swing.JLabel lblFilter;
    private javax.swing.JLabel lblFullNameError;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblGenderError;
    private javax.swing.JLabel lblGuardianError;
    private javax.swing.JLabel lblIDError;
    private javax.swing.JLabel lblRelation;
    private javax.swing.JLabel lblSortBy;
    private javax.swing.JLabel lblTableTitle;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlAdmit;
    private javax.swing.JPanel pnlPatientList;
    private javax.swing.JPanel pnlSearch;
    private javax.swing.JPanel pnlTitle;
    private javax.swing.JRadioButton rbFemale;
    private javax.swing.JRadioButton rbMale;
    private javax.swing.JTable tblPatientDetails;
    private javax.swing.JTextField tfAdddress;
    private javax.swing.JTextField tfAge;
    private javax.swing.JTextField tfContactNo;
    private javax.swing.JTextField tfFullName;
    private javax.swing.JTextField tfGuardian;
    private javax.swing.JTextField tfPatientId;
    private javax.swing.JTextField tfSearchBox;
    // End of variables declaration//GEN-END:variables
}
